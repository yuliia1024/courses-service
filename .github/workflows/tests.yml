name: Run Express Tests
on:
  pull_request:
  push:
    branches:
      - main
jobs:
  code-style:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [ 14.17.3 ]
    steps:
      - uses: actions/checkout@v3
      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
  tests:
    runs-on: ubuntu-latest
    timeout-minutes: 60
    strategy:
      max-parallel: 4
      matrix:
        node-version:
          - '14.17.3'
    services:
      postgres:
        image: mysql:latest
        env:
          MYSQL_USER: user
          MYSQL_PASSWORD: password
          MYSQL_ROOT_PASSWORD: rootpassword
          MYSQL_DATABASE: courses-test
        ports:
          - 3306:3306
        options: --health-cmd="mysqladmin ping" --health-interval=10s --health-timeout=5s --health-retries=3
      redis:
        image: redis
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    steps:
      - uses: actions/checkout@v3
#      - name: Use Node.js ${{ matrix.node-version }}
#        with:
#          node-version: ${{ matrix.node-version }}
      - name: Install Dependencies
        run: npm ci
      - name: Run Unit Tests
        run: npm run test:unit
        env:
          NODE_ENV: unit-test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PORT: 3000
          PREFIX_PATH: courses
          REQUEST_LIMIT_TIME: 1
          HTTP_TIMEOUT: 50
          RESET_TIMEOUT: 10
          ERROR_THRESHOLD_PERCENTAGE: 10
          SECRET_KEY_TOKEN: test
          EXPIRE_ACCESS_TOKEN: 7d
          PROJECT_SENDER_EMAIL: ${{ secrets.PROJECT_SENDER_EMAIL }}
          PROJECT_MAIL_PASSWORD:  ${{ secrets.PROJECT_MAIL_PASSWORD }}
          PASSWORD_HASH_ROUNDS: 10
          REDIS_PREFIX: dev-acc-token-
          REDIS_CLUSTER_MODE: false
          DB_NAME: courses-test
          DB_HOST: 127.0.0.1
          DB_USER: user
          DB_PASSWORD: password
          DB_MAX_CONNECTION: 300
          SSL_CA: 'dev-acc-token-'
          DB_PORT: '../ca-certificate.crt'
      - name: Run E2E Tests
        run: npm run test:e2e
        env:
          NODE_ENV: e2e-test
          REDIS_HOST: localhost
          REDIS_PORT: 6379
          PORT: 3000
          PREFIX_PATH: courses
          REQUEST_LIMIT_TIME: 1
          HTTP_TIMEOUT: 50
          RESET_TIMEOUT: 10
          ERROR_THRESHOLD_PERCENTAGE: 10
          SECRET_KEY_TOKEN: test
          EXPIRE_ACCESS_TOKEN: 7d
          PROJECT_SENDER_EMAIL: ${{ secrets.PROJECT_SENDER_EMAIL }}
          PROJECT_MAIL_PASSWORD:  ${{ secrets.PROJECT_MAIL_PASSWORD }}
          PASSWORD_HASH_ROUNDS: 10
          REDIS_PREFIX: 'dev-acc-token-'
          REDIS_CLUSTER_MODE: false
          DB_NAME: courses-test
          DB_HOST: 127.0.0.1
          DB_USER: user
          DB_PASSWORD: password
          DB_MAX_CONNECTION: 300
          DB_PORT: 3306
