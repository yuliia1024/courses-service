version: '3.3'
networks:
  main:
services:
  db:
    build:
      context: .local/mysql
    restart: always
    environment:
      MYSQL_DATABASE: ${DB_NAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - ${DB_PORT}:3306
    volumes:
      - ${DB_VOLUME}:/var/lib/mysql
    networks:
      main:
  test-db:
    build:
      context: .local/mysql
    restart: always
    environment:
      MYSQL_DATABASE: ${TEST_DB_NAME}
      MYSQL_PASSWORD: ${DB_PASSWORD}
      MYSQL_ROOT_PASSWORD: ${DB_PASSWORD}
    ports:
      - ${DB_PORT}:3306
    networks:
      main:
  redis:
    image: redis:6.2-alpine
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    restart: always
    ports:
      - ${REDIS_PORT}:${REDIS_PORT}
    command: redis-server --save 20 1 --loglevel warning
    volumes:
      - ${REDIS_VOLUME}:/var/lib/redis
    networks:
      main:
  server:
    build:
      context: .
      dockerfile: Dockerfile.local
    image: server
    container_name: server
    restart: on-failure
    env_file: .env
    environment:
      - NODE_ENV=$NODE_ENV
      - PORT=$PORT
      - PREFIX_PATH=$PREFIX_PATH
      - REQUEST_LIMIT_TIME=$REQUEST_LIMIT_TIME
      - HTTP_TIMEOUT=$HTTP_TIMEOUT
      - RESET_TIMEOUT=$RESET_TIMEOUT
      - ERROR_THRESHOLD_PERCENTAGE=$ERROR_THRESHOLD_PERCENTAGE
      - SECRET_KEY_TOKEN=$SECRET_KEY_TOKEN
      - EXPIRE_ACCESS_TOKEN=$EXPIRE_ACCESS_TOKEN
      - PROJECT_SENDER_EMAIL=$PROJECT_SENDER_EMAIL
      - PROJECT_MAIL_PASSWORD=$PROJECT_MAIL_PASSWORD
      - PASSWORD_HASH_ROUNDS=$PASSWORD_HASH_ROUNDS
      - REDIS_PREFIX=$REDIS_PREFIX
      - REDIS_HOST=redis
      - REDIS_PORT=$REDIS_PORT
      - REDIS_CLUSTER_MODE=$REDIS_CLUSTER_MODE
      - DB_VOLUME=$DB_VOLUME
      - DB_NAME=$DB_NAME
      - DB_HOST=db
      - DB_USER=$DB_USER
      - DB_PASSWORD=$DB_PASSWORD
      - DB_MAX_CONNECTION=$DB_MAX_CONNECTION
      - DB_PORT=$DB_PORT
      - REGION=$REGION
    ports:
      - ${PORT}:${PORT}
    links:
      - db
      - redis
    depends_on:
      - db
      - redis
    networks:
      main:
    command: npm run start
  end2end:
    image: busybox
    links:
      - test-db
      - redis
    command: "true"
  deps:
    image: busybox
    links:
      - db
      - redis
    command: "true"